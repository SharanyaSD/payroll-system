// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/SharanyaSD/Payroll-GoLang.git/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeStorer is an autogenerated mock type for the EmployeeStorer type
type EmployeeStorer struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: emp
func (_m *EmployeeStorer) CreateEmployee(emp repository.Employee) (repository.Employee, error) {
	ret := _m.Called(emp)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Employee) (repository.Employee, error)); ok {
		return rf(emp)
	}
	if rf, ok := ret.Get(0).(func(repository.Employee) repository.Employee); ok {
		r0 = rf(emp)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(repository.Employee) error); ok {
		r1 = rf(emp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmployee provides a mock function with given fields: ID
func (_m *EmployeeStorer) DeleteEmployee(ID string) (repository.Employee, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Employee, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Employee); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEmployees provides a mock function with given fields:
func (_m *EmployeeStorer) GetAllEmployees() ([]repository.Employee, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllEmployees")
	}

	var r0 []repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.Employee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByEmail provides a mock function with given fields: email
func (_m *EmployeeStorer) GetEmployeeByEmail(email string) (repository.Employee, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByEmail")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Employee, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Employee); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByID provides a mock function with given fields: ID
func (_m *EmployeeStorer) GetEmployeeByID(ID string) (repository.Employee, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByID")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Employee, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Employee); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeStorer creates a new instance of EmployeeStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeStorer {
	mock := &EmployeeStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
