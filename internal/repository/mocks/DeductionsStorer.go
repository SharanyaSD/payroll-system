// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/SharanyaSD/Payroll-GoLang.git/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// DeductionsStorer is an autogenerated mock type for the DeductionsStorer type
type DeductionsStorer struct {
	mock.Mock
}

// GetDeductionsByEmpoyeeID provides a mock function with given fields: ID
func (_m *DeductionsStorer) GetDeductionsByEmpoyeeID(ID string) (repository.Deductions, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeductionsByEmpoyeeID")
	}

	var r0 repository.Deductions
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Deductions, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Deductions); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(repository.Deductions)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDeductions provides a mock function with given fields: deductions
func (_m *DeductionsStorer) InsertDeductions(deductions repository.Deductions) (repository.Deductions, error) {
	ret := _m.Called(deductions)

	if len(ret) == 0 {
		panic("no return value specified for InsertDeductions")
	}

	var r0 repository.Deductions
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Deductions) (repository.Deductions, error)); ok {
		return rf(deductions)
	}
	if rf, ok := ret.Get(0).(func(repository.Deductions) repository.Deductions); ok {
		r0 = rf(deductions)
	} else {
		r0 = ret.Get(0).(repository.Deductions)
	}

	if rf, ok := ret.Get(1).(func(repository.Deductions) error); ok {
		r1 = rf(deductions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDeductionsStorer creates a new instance of DeductionsStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeductionsStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeductionsStorer {
	mock := &DeductionsStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
