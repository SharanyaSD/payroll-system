// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/SharanyaSD/Payroll-GoLang.git/internal/pkg/dto"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/SharanyaSD/Payroll-GoLang.git/internal/repository"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateEmployee provides a mock function with given fields: employeeDetails
func (_m *Service) CreateEmployee(employeeDetails dto.CreateEmployeeRequest) (repository.Employee, error) {
	ret := _m.Called(employeeDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmployee")
	}

	var r0 repository.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateEmployeeRequest) (repository.Employee, error)); ok {
		return rf(employeeDetails)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateEmployeeRequest) repository.Employee); ok {
		r0 = rf(employeeDetails)
	} else {
		r0 = ret.Get(0).(repository.Employee)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateEmployeeRequest) error); ok {
		r1 = rf(employeeDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmployee provides a mock function with given fields: id
func (_m *Service) DeleteEmployee(id string) (dto.Employee, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 dto.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.Employee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Employee); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.Employee)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEmployees provides a mock function with given fields:
func (_m *Service) GetAllEmployees() ([]dto.Employee, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllEmployees")
	}

	var r0 []dto.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.Employee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeductionsByEmpoyeeID provides a mock function with given fields: ID
func (_m *Service) GetDeductionsByEmpoyeeID(ID string) (repository.Deductions, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeductionsByEmpoyeeID")
	}

	var r0 repository.Deductions
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Deductions, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Deductions); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(repository.Deductions)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEarningsByEmpoyeeID provides a mock function with given fields: ID
func (_m *Service) GetEarningsByEmpoyeeID(ID string) (repository.Earnings, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetEarningsByEmpoyeeID")
	}

	var r0 repository.Earnings
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Earnings, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Earnings); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(repository.Earnings)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByEmail provides a mock function with given fields: email
func (_m *Service) GetEmployeeByEmail(email string) (dto.Employee, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByEmail")
	}

	var r0 dto.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.Employee, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Employee); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(dto.Employee)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByID provides a mock function with given fields: employee_id
func (_m *Service) GetEmployeeByID(employee_id string) (dto.Employee, error) {
	ret := _m.Called(employee_id)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByID")
	}

	var r0 dto.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.Employee, error)); ok {
		return rf(employee_id)
	}
	if rf, ok := ret.Get(0).(func(string) dto.Employee); ok {
		r0 = rf(employee_id)
	} else {
		r0 = ret.Get(0).(dto.Employee)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(employee_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDeductions provides a mock function with given fields: deductions
func (_m *Service) InsertDeductions(deductions repository.Deductions) (repository.Deductions, error) {
	ret := _m.Called(deductions)

	if len(ret) == 0 {
		panic("no return value specified for InsertDeductions")
	}

	var r0 repository.Deductions
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Deductions) (repository.Deductions, error)); ok {
		return rf(deductions)
	}
	if rf, ok := ret.Get(0).(func(repository.Deductions) repository.Deductions); ok {
		r0 = rf(deductions)
	} else {
		r0 = ret.Get(0).(repository.Deductions)
	}

	if rf, ok := ret.Get(1).(func(repository.Deductions) error); ok {
		r1 = rf(deductions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertEarnings provides a mock function with given fields: earnings
func (_m *Service) InsertEarnings(earnings repository.Earnings) (repository.Earnings, error) {
	ret := _m.Called(earnings)

	if len(ret) == 0 {
		panic("no return value specified for InsertEarnings")
	}

	var r0 repository.Earnings
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Earnings) (repository.Earnings, error)); ok {
		return rf(earnings)
	}
	if rf, ok := ret.Get(0).(func(repository.Earnings) repository.Earnings); ok {
		r0 = rf(earnings)
	} else {
		r0 = ret.Get(0).(repository.Earnings)
	}

	if rf, ok := ret.Get(1).(func(repository.Earnings) error); ok {
		r1 = rf(earnings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *Service) Login(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
